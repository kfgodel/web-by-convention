package ar.com.kfgodel.webbyconvention.auth.api;

import ar.com.kfgodel.webbyconvention.auth.WebUserIdentification;

import java.util.Optional;

/**
 * This type serves as the access point to the web server authenticated user.<br>
 *     This class manages the user identification created by the app into a thread local variable
 *     so the identification is available to the application when indicated by the WebIdentificationContextualizer
 * Created by kfgodel on 29/03/15.
 */
public class WebAuthenticatedId {

    /**
     * This variable changes by thread, storing the current authenticated user identification
     */
    private static final ThreadLocal<WebUserIdentification> currentIdentification = new ThreadLocal<>();


    /**
     * Removes the id from teh current thread
     */
    public static void removeFromThread() {
        currentIdentification.remove();
    }

    /**
     * Sets the give id available in the current thread
     */
    public static void setInThread(WebUserIdentification currentId) {
        currentIdentification.set(currentId);
    }

    /**
     * Gets the authenticated application id from the current thread context.<br>
     *     This id is generated by the authentication function given to the webserver config and made available to the current
     *     thread in every aunthenticated request.<br> Unauthenticated requests don't have an id available
     * @param <T> The type of expected id
     * @return The generated id, or an empty optional if this thread has no authenticated id
     */
    public static <T> Optional<T> getAppIdFromThread(){
        WebUserIdentification webUserIdentification = currentIdentification.get();
        if(webUserIdentification == null){
            return Optional.empty();
        }
        return Optional.of(webUserIdentification.getApplicationIdentification());
    }
}
